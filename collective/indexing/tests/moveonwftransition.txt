This file provides a couple of functional tests for `collective.indexing`, testing
the behaviour when moving objects on workflow transitions.

First the package has to be quick-installed in the portal and a testbrowser
as well as a logged in user with the necessary permissions are needed:

  >>> from Products.PloneTestCase import PloneTestCase as ptc
  >>> ptc.installPackage('collective.indexing', quiet=True)
  >>> portal.portal_quickinstaller.installProduct('collective.indexing')
  ''
  >>> self.setRoles(('Manager',))
  >>> browser = self.getBrowser()
  >>> browser.open('http://nohost/plone/')

When an object is moved on a workflow transition, unrestrictedSearchResults is called. 
To be able to test this, we'll create a content rule which moves an item on a workflow transition.
We will create a source-folder, where we apply our content rule and a destination-folder, where
the content rule's action will move our object into.
First, we create a source folder, where we are going to assign the content rule:

  >>> browser.getLink('Home').click()
  >>> browser.getLink(url='createObject?type_name=Folder').click()
  >>> browser.getControl(name='title').value = 'source-folder'
  >>> browser.getControl('Save').click()

  >>> portal['source-folder']
  <ATFolder at /plone/source-folder>

Now, we'll create a folder where we want to move our item in:

  >>> browser.getLink('Home').click()
  >>> browser.getLink(url='createObject?type_name=Folder').click()
  >>> browser.getControl(name='title').value = 'destination-folder'
  >>> browser.getControl('Save').click()

  >>> portal['destination-folder']
  <ATFolder at /plone/destination-folder>

Now we create a content rule, which will move the object to our destination-folder when a 
workflow transition happens:

  >>> browser.getLink('Rules').click()
  >>> browser.getLink('content rules control panel').click()
  >>> browser.getControl('Add content rule').click()
  >>> browser.getControl('Title').value = 'move-on-wf-transition'
  >>> browser.getControl('Triggering event').value = ['Workflow state changed']
  >>> browser.getControl('Save').click()

We're back at the control panel.  Now we'll edit the content rule:

  >>> browser.url
  'http://nohost/plone/@@rules-controlpanel'
  >>> browser.getLink('move-on-wf-transition (Workflow state changed)').click()

Now comes the action, we want all objects to be moved to the destination-folder:

  >>> browser.getControl('Add action').value = ['plone.actions.Move']
  >>> browser.getControl('Add', index=3).click()
  >>> browser.getControl(name='form.target_folder.query').value = '/destination-folder'
  >>> browser.getControl('Search', index=2).click()
  >>> browser.getControl(name='form.target_folder').value = ['/destination-folder']
  >>> browser.getControl('Save').click()

We're done with setting up the content rule.  We need to apply the
rule to the source-folder before we try to add an item:

  >>> browser.getLink('source-folder').click()
  >>> browser.getLink('Rules').click()
  >>> browser.getControl(name='rule_id').displayOptions
  ['move-on-wf-transition']
  >>> browser.getControl('Add').click()

Let's go back to the source-folder and create a Document now:

  >>> browser.getLink('source-folder').click()
  >>> browser.getLink(url='createObject?type_name=Document').click()
  >>> browser.getControl(name='title').value = 'mydoc'
  >>> browser.getControl('Save').click()

  >>> browser.url
  'http://nohost/plone/source-folder/mydoc'

Let's do the workflow transition now, which triggers the content rule:

  >>> browser.getLink(url='content_status_modify?workflow_action=publish').click()

The document should have moved into the `destination-folder` folder now:

  >>> browser.url
  'http://nohost/plone/destination-folder/mydoc'
